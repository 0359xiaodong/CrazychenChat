package com.crazychenchat.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.media.ExifInterface;
import android.media.ThumbnailUtils;

public class PhotoUtil {

	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ recycle
	 * 
	 * @throws
	 */
	public static void recycle(Bitmap bitmap) {
		// ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½ï¿½ï¿½ï¿½ï¿½
		if (bitmap != null && !bitmap.isRecycled()) {
			// ï¿½ï¿½ï¿½Õ²ï¿½ï¿½ï¿½ï¿½ï¿½Îªnull
			bitmap.recycle();
			bitmap = null;
		}
		System.gc();
	}

	/**
	 * ï¿½ï¿½È¡Ö¸ï¿½ï¿½Â·ï¿½ï¿½ï¿½Âµï¿½Í¼Æ¬ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ getImageThumbnail
	 * 
	 * @return Bitmap
	 * @throws
	 */
	public static Bitmap getImageThumbnail(String imagePath, int width,
			int height) {
		Bitmap bitmap = null;
		BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		// ï¿½ï¿½È¡ï¿½ï¿½ï¿½Í¼Æ¬ï¿½Ä¿ï¿½Í¸ß£ï¿½×¢ï¿½ï¿½Ë´ï¿½ï¿½ï¿½bitmapÎªnull
		bitmap = BitmapFactory.decodeFile(imagePath, options);
		options.inJustDecodeBounds = false; // ï¿½ï¿½Îª false
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å±ï¿½
		int h = options.outHeight;
		int w = options.outWidth;
		int beWidth = w / width;
		int beHeight = h / height;
		int be = 1;
		if (beWidth < beHeight) {
			be = beWidth;
		} else {
			be = beHeight;
		}
		if (be <= 0) {
			be = 1;
		}
		options.inSampleSize = be;
		// ï¿½ï¿½ï¿½Â¶ï¿½ï¿½ï¿½Í¼Æ¬ï¿½ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½Åºï¿½ï¿½bitmapï¿½ï¿½×¢ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½options.inJustDecodeBounds ï¿½ï¿½Îª false
		bitmap = BitmapFactory.decodeFile(imagePath, options);
		// ï¿½ï¿½ï¿½ï¿½ThumbnailUtilsï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÒªÖ¸ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½Ä¸ï¿½Bitmapï¿½ï¿½ï¿½ï¿½
		bitmap = ThumbnailUtils.extractThumbnail(bitmap, width, height,
				ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
		return bitmap;
	}

	/**
	 * saveBitmap
	 * 
	 * @param @param filename---ï¿½ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½ï¿½Ê?ï¿½ï¿½Ä¿Â¼ï¿½Ô¼ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½
	 * @param @param bitmap
	 * @param @param isDelete --ï¿½Ç·ï¿½Ö»ï¿½ï¿½Ò»ï¿½ï¿½
	 * @return void
	 * @throws
	 */
	public static void saveBitmap(String dirpath, String filename,
			Bitmap bitmap, boolean isDelete) {
		File dir = new File(dirpath);
		if (!dir.exists()) {
			dir.mkdirs();
		}

		File file = new File(dirpath, filename);
		// ï¿½ï¿½ï¿½ï¿½ï¿½Ú¼ï¿½É¾ï¿½ï¿½-Ä¬ï¿½ï¿½Ö»ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½
		if (isDelete) {
			if (file.exists()) {
				file.delete();
			}
		}

		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		FileOutputStream out = null;
		try {
			out = new FileOutputStream(file);
			if (bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)) {
				out.flush();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (out != null) {
				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static File getFilePath(String filePath, String fileName) {
		File file = null;
		makeRootDirectory(filePath);
		try {
			file = new File(filePath + fileName);
			if (!file.exists()) {
				file.createNewFile();
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return file;
	}

	public static void makeRootDirectory(String filePath) {
		File file = null;
		try {
			file = new File(filePath);
			if (!file.exists()) {
				file.mkdirs();
			}
		} catch (Exception e) {

		}
	}

	/**
	 * 
	 * ï¿½ï¿½È¡Í¼Æ¬ï¿½ï¿½ï¿½Ô£ï¿½ï¿½ï¿½×ªï¿½Ä½Ç¶ï¿½
	 * @param path Í¼Æ¬ï¿½ï¿½ï¿½Â·ï¿½ï¿?
	 * @return degreeï¿½ï¿½×ªï¿½Ä½Ç¶ï¿½
	 */

	public static int readPictureDegree(String path) {
		int degree = 0;
		try {
			ExifInterface exifInterface = new ExifInterface(path);
			int orientation = exifInterface.getAttributeInt(
					ExifInterface.TAG_ORIENTATION,
					ExifInterface.ORIENTATION_NORMAL);
			switch (orientation) {
			case ExifInterface.ORIENTATION_ROTATE_90:
				degree = 90;
				break;
			case ExifInterface.ORIENTATION_ROTATE_180:
				degree = 180;
				break;
			case ExifInterface.ORIENTATION_ROTATE_270:
				degree = 270;
				break;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return degree;

	}

	/** ï¿½ï¿½×ªÍ¼Æ¬Ò»ï¿½ï¿½ï¿½Ç¶ï¿½
	  * rotaingImageView
	  * @return Bitmap
	  * @throws
	  */
	public static Bitmap rotaingImageView(int angle, Bitmap bitmap) {
		// ï¿½ï¿½×ªÍ¼Æ¬ ï¿½ï¿½ï¿½ï¿½
		Matrix matrix = new Matrix();
		matrix.postRotate(angle);
		// ï¿½ï¿½ï¿½ï¿½ï¿½Âµï¿½Í¼Æ¬
		Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,
				bitmap.getWidth(), bitmap.getHeight(), matrix, true);
		return resizedBitmap;
	}

	/**
	 * ï¿½ï¿½Í¼Æ¬ï¿½ï¿½ÎªÔ²ï¿½ï¿½
	 * 
	 * @param bitmap
	 *            Ô­BitmapÍ¼Æ¬
	 * @param pixels
	 *            Í¼Æ¬Ô²ï¿½ÇµÄ»ï¿½ï¿½ï¿½(ï¿½ï¿½Î»:ï¿½ï¿½ï¿½ï¿½(px))
	 * @return ï¿½ï¿½ï¿½ï¿½Ô²ï¿½Çµï¿½Í¼Æ¬(Bitmap ï¿½ï¿½ï¿½ï¿½)
	 */
	public static Bitmap toRoundCorner(Bitmap bitmap, int pixels) {
		Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
				bitmap.getHeight(), Config.ARGB_8888);
		Canvas canvas = new Canvas(output);

		final int color = 0xff424242;
		final Paint paint = new Paint();
		final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
		final RectF rectF = new RectF(rect);
		final float roundPx = pixels;

		paint.setAntiAlias(true);
		canvas.drawARGB(0, 0, 0, 0);
		paint.setColor(color);
		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
		canvas.drawBitmap(bitmap, rect, rect, paint);

		return output;
	}
	
	/**
	 * ï¿½ï¿½Í¼Æ¬×ªï¿½ï¿½ÎªÔ²ï¿½ï¿½Í·ï¿½ï¿½ 
	 * 
	 * @Title: toRoundBitmap
	 * @throws
	 */
	public static Bitmap toRoundBitmap(Bitmap bitmap) {
		int width = bitmap.getWidth();
		int height = bitmap.getHeight();
		float roundPx;
		float left, top, right, bottom, dst_left, dst_top, dst_right, dst_bottom;
		if (width <= height) {
			roundPx = width / 2;

			left = 0;
			top = 0;
			right = width;
			bottom = width;

			height = width;

			dst_left = 0;
			dst_top = 0;
			dst_right = width;
			dst_bottom = width;
		} else {
			roundPx = height / 2;

			float clip = (width - height) / 2;

			left = clip;
			right = width - clip;
			top = 0;
			bottom = height;
			width = height;

			dst_left = 0;
			dst_top = 0;
			dst_right = height;
			dst_bottom = height;
		}

		Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);
		Canvas canvas = new Canvas(output);

		final Paint paint = new Paint();
		final Rect src = new Rect((int) left, (int) top, (int) right,
				(int) bottom);
		final Rect dst = new Rect((int) dst_left, (int) dst_top,
				(int) dst_right, (int) dst_bottom);
		final RectF rectF = new RectF(dst);

		paint.setAntiAlias(true);// ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½ï¿½Þ¾ï¿½ï¿?

		canvas.drawARGB(0, 0, 0, 0); // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Canvas

		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Ô²,drawRounRectï¿½ï¿½drawCircle
		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);// ï¿½ï¿½Ô²ï¿½Ç¾ï¿½ï¿½Î£ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎªÍ¼ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ò£¬µÚ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Íµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö±ï¿½ï¿½ï¿½Ë®Æ½Ô²ï¿½Ç°ë¾¶ï¿½Í´ï¿½Ö±Ô²ï¿½Ç°ë¾¶ï¿½ï¿?
		// canvas.drawCircle(roundPx, roundPx, roundPx, paint);

		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼Æ¬ï¿½à½»Ê±ï¿½ï¿½Ä£Ê½,ï¿½Î¿ï¿½http://trylovecatch.iteye.com/blog/1189452
		canvas.drawBitmap(bitmap, src, dst, paint); // ï¿½ï¿½Mode.SRC_INÄ£Ê½ï¿½Ï²ï¿½bitmapï¿½ï¿½ï¿½Ñ¾ï¿½drawï¿½Ëµï¿½Circle

		return output;
	}

}
